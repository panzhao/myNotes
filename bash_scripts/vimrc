"显示行号
set nocompatible
"set number
"set t_Co=256
colorschem desert
set backspace=indent,eol,start
"设置可粘贴 与snippets有冲突
"set paste

"打开文件检测
filetype plugin on

"忽略大小写
set ignorecase smartcase

"让鼠标工作
"set mouse=a

"自动缩进
set autoindent
set hls

"设置cstag代替tag
set cst
"设置字典
set dictionary=/usr/share/dict/words

"根据所列出的编码方式匹配需要打开的文件
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1,unicode

"当前文件的编码方式
set fileencoding=utf-8

"当前缓冲区的编码方式
set encoding=utf-8

"设置tab
set tabstop=4
set expandtab
set showmatch
"always show current position
set ruler

"定义<leaders>为;
let mapleader=";"
nmap <silent><leader><tab> :bnext<cr>
nmap <silent><space><tab>  :bprevious<cr>

"set softtabstop=4
set shiftwidth=4


"""""""""""""""""""""""""""""""""""""""""""""""
"插件设置
"
"
"""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""
"在taglist中只打开当前文件的标签
"""""""""""""""""""""""""""""""""
let Tlist_File_Fold_Auto_Close=1
let Tlist_Exit_OnlyWindow=1

""""""""""""""""""""
"ctags 
""""""""""""""""""""
set tags=./tags,../tags
"生成tags文件
cmap<leader>t !ctags -R `pwd` <cr>
"生成cscope索引文件
cmap<leader>s  !cscope -bqk -i cscope.files <cr>

"""""""""""""""""""""""""""""""""""""""
"LookUpFile
"""""""""""""""""""""""""""""""""""""""
let g:LookupFile_MinPatLength = 4               "最少输入2个字符才开始查找
let g:LookupFile_PreserveLastPattern = 0        "不保存上次查找的字符串
let g:LookupFile_PreservePatternHistory = 1     "保存查找历史
let g:LookupFile_AlwaysAcceptFirst = 1          "回车打开第一个匹配项目
let g:LookupFile_AllowNewFiles = 0              "不允许创建不存在的文件
"let g:LookupFile_UsingSpecializedTags = 1      "使文件显示在前
let g:LookupFile_Bufs_LikeBufCmd = 0
let g:LookupFile_ignorecase = 1
let g:LookupFile_smartcase = 1

if filereadable("./filenametags")
   let g:LookupFile_TagExpr = '"./filenametags"'
endif

nmap <silent> <leader>lk :LUTags<cr>
nmap <silent> <leader>ll :LUBufs<cr>
nmap <silent> <leader>lw :LUWalk<cr>
nmap<leader>k :let g:LookupFile_TagExpr='"../filenametags"'


"""""""""""""""""""""""""""""""""""""""""""""""
"插件设置结束
"
"
"""""""""""""""""""""""""""""""""""""""""""""""

"""""""""对f*的映射"""""""""""
"窗口切换
map<F2> <C-W>w
"加载vimgdb映射键
"map<F3> :run macros/gdb_mappings.vim <CR>
"打开vimgdb变量窗口
"map<F4> :bel 20vsp gdb-varibles <CR>
"编译当前程序
autocmd FileType c,cpp,h map<silent><leader><F5> :w <CR> :make <CR> :cw <CR> :cc <cr>
"一般模式下的退出
map<silent><leader>x :q <CR>
map<silent><leader>w :w <CR>
map<silent><leader>qa :qa <CR>
imap<silent><leader>x <Esc> :x <CR>
imap<silent><leader>w <Esc> :w <CR>
cmap<F2> set tags=
cmap<F3> vimgrep
nmap<F4> :set mouse=
nmap<silent><leader>m :A<cr>
"打开list
map<F8> :Tlist <CR>
"在tlist中加入文件
map<F12> :TlistAddFiles *.[ch]*
"关于quichfix
map <silent><leader><space> :cw<cr>
map <silent><leader>n :cn <CR>
map <silent><leader>p :cp <CR>
map <silent><leader>q :cclose<CR>
map <silent><space><F6> :vimgrep <c-r>=expand("<cword>")<CR> ./*.[chj]* <CR> :cw <CR>

""""""""""""""""""""""""""""""
" netrw setting
""""""""""""""""""""""""""""""
"let g:netrw_winsize = 30
nmap <silent> <leader>fe :Explore<cr>

""""""""对f*的映射""""""""""
imap jj  <Esc>

"""""""""""""""""""""""""""""""""
"
"cscope
"""""""""""""""""""""""""""""""""
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=1
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
endif
"end cscope

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

""""""""""""""""""""""""""""""""""
"
"打开文件时自动跳转到上次编辑的位置
""""""""""""""""""""""""""""""""""
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

syntax on "打开语法高亮

"set completeopt=longest,menu "设置智能补全时候不打开预览窗口


"设置当前文件的目录为工作目录
"set autochdir

""""""""""""""""""""""""""""""
"
"BufExplorer setting
""""""""""""""""""""""""""""""
let g:bufExplorerDefaultHelp=0       " Do not show default help.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = 30  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.
autocmd BufWinEnter \[Buf\ List\] setl nonumber

""""""""""""""""""""""""""""""
" winManager setting
"""""""""""""""""""""""""""""""
let g:winManagerWindowLayout = "BufExplorer,FileExplorer|TagList"
    let g:winManagerWidth = 30
let g:defaultExplorer = 0
nmap <C-W><C-F> :FirstExplorerWindow<cr>
nmap <C-W><C-B> :BottomExplorerWindow<cr>
nmap <silent><F9> :WMToggle<cr>

"auto display the result of search
set is

"set the history of cmd in vim
set history=100

"设置自动换行
autocmd FileType c,cpp,cc,h set textwidth=100
au BufRead,BufNewFile * setfiletype txt 

" OmniCppComplete
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_MayCompleteDot = 1   " 输入 .  后自动补全
let OmniCpp_MayCompleteArrow = 1 " 输入 -> 后自动补全
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
set completeopt=menu
let OmniCpp_NamespaceSearch = 1   " 0 ,  1 or 2
let OmniCpp_DisplayMode = 1
let OmniCpp_ShowScopeInAbbr = 0
let OmniCpp_ShowPrototypeInAbbr = 1
let OmniCpp_MayCompleteScope = 1

"In order to use textbrowser.
au BufEnter *.txt setlocal ft=txt

""""""""""""""""""""""""""""""""
"read project file of current project
"
""""""""""""""""""""""""""""""""
if filereadable("curProFile.vim")
    source curProFile.vim
endif

"auto mark the state of file close, and recover it when next open the file.
"au BufWinLeave *.* mkview
"au BufWinEnter *.* silent loadview

"qml configure
autocmd BufNewFile,BufRead *.qml set filetype=qml

"auto sv and ld session
let g:AutoSessionFile="Session.vim"
let g:OrigPWD=getcwd()
if filereadable(g:AutoSessionFile)
    if argc() == 0
        au VimEnter * call EnterHandler()
        au VimLeave * call LeaveHandler()
    endif
endif
function! LeaveHandler()
    exec "mks! ".g:OrigPWD."/".g:AutoSessionFile
endfunction
function! EnterHandler()
    exe "source ".g:AutoSessionFile
endfunction
""auto sv and ld session
"let g:AutoViminfoFile="viminfo.vim"
"let g:OrigPWD=getcwd()
"if filereadable(g:AutoSessionFile)
"    if argc() == 0
"        au VimEnter * call EnterVimHandler()
"        au VimLeave * call LeaveVimHandler()
"    endif
"endif
"function! LeaveVimHandler()
"    exec "mks! ".g:OrigPWD."/".g:AutoViminfoFile
"endfunction
"function! EnterVimHandler()
"    exe "source ".g:AutoViminfoFile
"endfunction
